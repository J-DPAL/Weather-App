services:
  db:
    image: postgres:15-alpine
    container_name: weather_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: weather_user
      POSTGRES_PASSWORD: weather_pass
      POSTGRES_DB: weather_db
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U weather_user -d weather_db"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - weather-net

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@weatherapp.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    ports:
      - "5050:80"
    depends_on:
      - db
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - weather-net

  data-service:
    build:
      context: ./backend/data-service
    container_name: data_service
    restart: on-failure
    env_file:
      - ./backend/data-service/.env
    environment:
      DATABASE_URL: postgresql+asyncpg://weather_user:weather_pass@db:5432/weather_db
      SERVICE_PORT: 8003
    depends_on:
      - db
    ports:
      - "8003:8003"
    networks:
      - weather-net

  location-service:
    build:
      context: ./backend/location-service
    container_name: location_service
    restart: on-failure
    env_file:
      - ./backend/location-service/.env
    environment:
      DATA_SERVICE_URL: http://data-service:8003
      SERVICE_PORT: 8001
    depends_on:
      - data-service
    ports:
      - "8001:8001"
    networks:
      - weather-net

  weather-service:
    build:
      context: ./backend/weather-service
    container_name: weather_service
    restart: on-failure
    env_file:
      - ./backend/weather-service/.env
    environment:
      DATA_SERVICE_URL: http://data-service:8003
      SERVICE_PORT: 8002
    depends_on:
      - data-service
    ports:
      - "8002:8002"
    networks:
      - weather-net

  frontend:
    build:
      context: ./frontend
    container_name: weather_frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - data-service
      - location-service
      - weather-service
    networks:
      - weather-net

volumes:
  pgdata:
  pgadmin_data:

networks:
  weather-net:
    driver: bridge
